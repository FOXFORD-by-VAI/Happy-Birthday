name: CI/CD Workflow for GitHub Pages

on:
  release:
    types: [published]
    tags:
      - 'v*.*.*.release'
      - 'v*.*.*.pre-release'
      - 'v*.*.*.alpha'
      - 'v*.*.*.dev'
      - 'v*.*.*.beta'
      - 'v*.*.*.*.build'
  push:
    branches:
      - 'preview'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.get_node_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.1

      - name: Setup Node.js (latest)
        uses: actions/setup-node@v4.0.4
        with:
          node-version: '20.18.0'
      - name: Verify Node.js Version
        id: get_node_version
        run: echo "::set-output name=version::$(node -v)"
      
      - name: Cache Node.js modules
        uses: actions/cache@v4.1.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.get_node_version.outputs.version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.get_node_version.outputs.version }}

  build:
    name: Build Project
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: npm install
        working-directory: src

      - name: Build the Project
        run: npm run build
        working-directory: src

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: build-output
          path: './src/dist'

  deploy:
    name: Deploy to GitHub Pages (Release Only)
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.release')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.1

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Deploy Pages
        id: deploy
        uses: actions/deploy-pages@v4.0.5

  handle_special_branches:
    name: Handle Special Branches
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && (contains(github.ref, '.alpha') || contains(github.ref, '.dev') || contains(github.ref, '.beta') || contains(github.ref, '.build'))
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.1

      - name: Create or Checkout Special Branch
        run: |
          BRANCH_NAME="special-${GITHUB_REF##*/}"
          git checkout -b $BRANCH_NAME || git checkout $BRANCH_NAME
          echo "Checked out branch $BRANCH_NAME"

      - name: Create warning.md
        run: |
          echo "# Внимание!" > warning.md
          echo "Эта ветка (${GITHUB_REF##*/}) служит временно." >> warning.md
          echo "Не следует публиковать изменения напрямую." >> warning.md
          echo "Последнее обновление: $(date)" >> warning.md

      - name: Commit and Push Changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Action"
          git add warning.md
          git commit -m "Добавлен warning.md"
          git push -u origin HEAD

      - name: Add Release Comment
        run: |
          echo "Сборка для тега: ${GITHUB_REF##*/} завершена успешно." > comment.txt
          gh release view ${{ github.event.release.tag_name }} --json id | jq -r '.id' | xargs -I {} gh release comment {} --body-file comment.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bugfix:
    name: Bugfix - Run Tests and Deploy if Successful
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event.release.prerelease == false && !contains(github.ref, '.dev')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.1

      - name: Setup Node.js (latest)
        uses: actions/setup-node@v4.0.4
        with:
          node-version: '20.18.0'

      - name: Install Dependencies
        run: npm ci
        working-directory: src

      - name: Run Tests
        run: npm test
        working-directory: src

      - name: Deploy on Successful Tests
        if: success()
        run: echo "Tests passed!"
